{"version":3,"file":"functions.js","mappings":"m8CASA,SAAgBA,EAAIC,EAAeC,GACjC,OAAOD,EAAQC,CACjB,CASA,SAAgBC,EAAMF,EAAeC,GACnC,OAAOD,EAAQC,EAAS,EAC1B,CAQA,SAAsBE,EAAaC,G,0FAGjC,UADeC,EACH,IAAOD,EADM,IAAIE,SAAQ,SAACC,GAAY,OAAAC,WAAWD,EAASF,EAApB,M,OAElD,OADAI,EAAAC,OACO,CAAP,EAAON,GAFO,IAACC,C,OAUjB,SAAgBM,EAAMC,GACpB,IAAMC,EAAQC,aAAY,WACxB,IAAMC,EAAOC,IACbJ,EAAWK,UAAUF,EACvB,GAAG,KAEHH,EAAWM,WAAa,WACtBC,cAAcN,EAChB,CACF,CAMA,SAAgBG,IACd,OAAO,IAAII,MAAOC,oBACpB,CAQA,SAAgBC,EAAUC,EAAqBX,GAC7C,IAAIY,EAAS,EACPX,EAAQC,aAAY,WACxBU,GAAUD,EACVX,EAAWK,UAAUO,EACvB,GAAG,KAEHZ,EAAWM,WAAa,WACtBC,cAAcN,EAChB,CACF,CAQA,SAAgBY,EAAWC,GAGzB,OAFAC,QAAQC,IAAIF,GAELA,CACT,C,oIAhFAG,EAAAA,IAAA9B,EAWA8B,EAAAA,MAAA3B,EAUA2B,EAAAA,aAAA1B,EAYA0B,EAAAA,MAAAlB,EAeAkB,EAAAA,YAAAb,EAUAa,EAAAA,UAAAP,EAkBAO,EAAAA,WAAAJ,EAMAK,gBAAgBC,UAAU,MAAOhC,GACjC+B,gBAAgBC,UAAU,QAAS7B,GACnC4B,gBAAgBC,UAAU,eAAgB5B,GAC1C2B,gBAAgBC,UAAU,QAASpB,GACnCmB,gBAAgBC,UAAU,YAAaT,GACvCQ,gBAAgBC,UAAU,MAAON,E,IC5Fb,OAAO,EADD,CAAC,E","sources":["webpack://excel-custom-functions/./src/functions/functions.ts","webpack://excel-custom-functions/webpack/startup"],"sourcesContent":["/* global clearInterval, console, CustomFunctions, setInterval */\n\n/**\n * Adds two numbers.\n * @customfunction\n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers.\n */\nexport function add(first: number, second: number): number {\n  return first + second;\n}\n\n/**\n * Adds two numbers and plus 40.\n * @customfunction\n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers and 40.\n */\nexport function add40(first: number, second: number): number {\n  return first + second + 40;\n}\n\n/**\n * await some sceonds\n * @customfunction\n * @param waitSecondNumber the wait second number\n * @returns return the wait second number.\n */\nexport async function AwaitSeconds(waitSecondNumber: number): Promise<number> {\n  // eslint-disable-next-line no-undef\n  const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay));\n  await sleep(1000 * waitSecondNumber);\n  return waitSecondNumber;\n}\n\n/**\n * Displays the current time once a second.\n * @customfunction\n * @param invocation Custom function handler\n */\nexport function clock(invocation: CustomFunctions.StreamingInvocation<string>): void {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time.\n * @returns String with the current time formatted for the current locale.\n */\nexport function currentTime(): string {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param incrementBy Amount to increment\n * @param invocation Custom function handler\n */\nexport function increment(incrementBy: number, invocation: CustomFunctions.StreamingInvocation<number>): void {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param message String to write.\n * @returns String to write.\n */\nexport function logMessage(message: string): string {\n  console.log(message);\n\n  return message;\n}\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"ADD40\", add40);\nCustomFunctions.associate(\"AWAITSECONDS\", AwaitSeconds);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[93501](0, __webpack_exports__);\n"],"names":["add","first","second","add40","AwaitSeconds","waitSecondNumber","delay","Promise","resolve","setTimeout","_a","sent","clock","invocation","timer","setInterval","time","currentTime","setResult","onCanceled","clearInterval","Date","toLocaleTimeString","increment","incrementBy","result","logMessage","message","console","log","exports","CustomFunctions","associate"],"sourceRoot":""}