{"version":3,"file":"functions.js","mappings":"yBAgFAA,gBAAgBC,UAAU,OAvEnB,SAAaC,EAAeC,GACjC,OAAOD,EAAQC,CACjB,IAsEAH,gBAAgBC,UAAU,gBA9DnBG,eAA4BC,GAElBC,MAEf,aAFeA,EACH,IAAOD,EADM,IAAIE,SAASC,GAAYC,WAAWD,EAASF,MAE/DD,CACT,IA0DAL,gBAAgBC,UAAU,SAnDnB,SAAeS,GACpB,MAAMC,EAAQC,aAAY,KACxB,MAAMC,GAcD,IAAIC,MAAOC,qBAbhBL,EAAWM,UAAUH,EAAK,GACzB,KAEHH,EAAWO,WAAa,KACtBC,cAAcP,EAAM,CAExB,IA2CAX,gBAAgBC,UAAU,aA3BnB,SAAmBkB,EAAqBT,GAC7C,IAAIU,EAAS,EACb,MAAMT,EAAQC,aAAY,KACxBQ,GAAUD,EACVT,EAAWM,UAAUI,EAAO,GAC3B,KAEHV,EAAWO,WAAa,KACtBC,cAAcP,EAAM,CAExB,IAkBAX,gBAAgBC,UAAU,OAVnB,SAAoBoB,GAGzB,OAFAC,QAAQC,IAAIF,GAELA,CACT,G","sources":["webpack://excel-custom-functions/./src/functions/functions.ts"],"sourcesContent":["/* global clearInterval, console, CustomFunctions, setInterval */\n\n/**\n * Adds two numbers.\n * @customfunction\n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers.\n */\nexport function add(first: number, second: number): number {\n  return first + second;\n}\n\n/**\n * await some sceonds\n * @customfunction\n * @param waitSecondNumber the wait second number\n * @returns return the wait second number.\n */\nexport async function AwaitSeconds(waitSecondNumber: number): Promise<number> {\n  // eslint-disable-next-line no-undef\n  const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay));\n  await sleep(1000 * waitSecondNumber);\n  return waitSecondNumber;\n}\n\n/**\n * Displays the current time once a second.\n * @customfunction\n * @param invocation Custom function handler\n */\nexport function clock(invocation: CustomFunctions.StreamingInvocation<string>): void {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time.\n * @returns String with the current time formatted for the current locale.\n */\nexport function currentTime(): string {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param incrementBy Amount to increment\n * @param invocation Custom function handler\n */\nexport function increment(incrementBy: number, invocation: CustomFunctions.StreamingInvocation<number>): void {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param message String to write.\n * @returns String to write.\n */\nexport function logMessage(message: string): string {\n  console.log(message);\n\n  return message;\n}\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"AWAITSECONDS\", AwaitSeconds);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);"],"names":["CustomFunctions","associate","first","second","async","waitSecondNumber","delay","Promise","resolve","setTimeout","invocation","timer","setInterval","time","Date","toLocaleTimeString","setResult","onCanceled","clearInterval","incrementBy","result","message","console","log"],"sourceRoot":""}